# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Patient {
  id: Int!
  name: String!
  age: Float!
  appointments: [PatientAppointment]!
}

type PatientAppointment {
  id: Int!
  patient: Patient!
  appointment: Appointment!
}

type Appointment {
  id: Int!
  date: String!
  doctorId: Int!
  doctor: Doctor!
  patients: [PatientAppointment]!
}

type Doctor {
  id: Int!
  name: String!
  specialty: String!
  Address: Address
  appointments: [Appointment!]
}

type Address {
  id: Int!
  street: String!
  neighborhood: String!
  complement: String!
  city: String!
  state: String!
  doctorId: Int!
  doctor: Doctor!
}

type MsgResponse {
  msg: String!
}

type User {
  id: Int!
  name: String!
  email: String!
  password: String!
  role: String!
  isValidated: Boolean!
}

type Query {
  user(params: FindOneParamsGraphQL!): User!
  signout: MsgResponse!
  doctors: [Doctor!]!
  doctor(params: FindOneParamsGraphQL!): Doctor!
  patients: [Patient!]!
  patient(params: FindOneParamsGraphQL!): Patient!
  appointments: [Appointment!]!
  appointment(params: FindOneParamsGraphQL!): Appointment!
  addresses: [Address!]!
  address(params: FindOneParamsGraphQL!): Address!
}

input FindOneParamsGraphQL {
  id: Int!
}

type Mutation {
  createUser(createUserDTO: CreateUserDTO!): User!
  updateUser(updateUserDTO: UpdateUserIdDTO!): User!
  removeUser(params: FindOneParamsGraphQL!): User!
  signin(createUserDTO: SignInUserDTO!): MsgResponse!
  verify(params: VerifyUserDTO!): MsgResponse!
  forgotPassword(params: ForgotPasswordDTO!): MsgResponse!
  changePassword(params: ChangePasswordDTO!): MsgResponse!
  createDoctor(createDoctorDTO: CreateDoctorDTO!): Doctor!
  updateDoctor(updateDoctorDTO: UpdateDoctorIdDTO!): Doctor!
  removeDoctor(params: FindOneParamsGraphQL!): Doctor!
  createPatient(createPatientDTO: CreatePatientDTO!): Patient!
  updatePatient(updatePatientDTO: UpdatePatientIdDTO!): Patient!
  removePatient(params: FindOneParamsGraphQL!): Patient!
  createAppointment(createAppointmentDTO: CreateAppointmentDTO!): Appointment!
  updateAppointment(updateAppointmentDTO: UpdateAppointmentIdDTO!): Appointment!
  removeAppointment(params: FindOneParamsGraphQL!): Appointment!
  createAddress(createAddressDTO: CreateAddressDTO!): Address!
  updateAddress(updateAddressDTO: UpdateAddressIdDTO!): Address!
  removeAddress(params: FindOneParamsGraphQL!): Address!
}

input CreateUserDTO {
  name: String!
  email: String!
  password: String!
  role: String!
}

input UpdateUserIdDTO {
  id: Int!
  name: String
  email: String
  password: String
  role: String
}

input SignInUserDTO {
  email: String!
  password: String!
}

input VerifyUserDTO {
  email: String!
  code: String!
}

input ForgotPasswordDTO {
  email: String!
}

input ChangePasswordDTO {
  email: String!
  code: String!
  password: String!
}

input CreateDoctorDTO {
  name: String!
  specialty: String!
  addressId: Int
}

input UpdateDoctorIdDTO {
  name: String
  specialty: String
  addressId: Float
  id: Int!
}

input CreatePatientDTO {
  name: String!
  age: Int!
}

input UpdatePatientIdDTO {
  id: Int!
  name: String
  age: Int
}

input CreateAppointmentDTO {
  date: String!
  doctorId: Int!
  patientsId: [Int!]!
}

input UpdateAppointmentIdDTO {
  id: Int!
  date: String
  doctorId: Int
  patientsId: [Int!]
}

input CreateAddressDTO {
  street: String!
  neighborhood: String!
  complement: String!
  city: String!
  state: String!
  doctorId: Int!
}

input UpdateAddressIdDTO {
  id: Int!
  street: String
  neighborhood: String
  complement: String
  city: String
  state: String
  doctorId: Float
}